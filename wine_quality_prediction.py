# -*- coding: utf-8 -*-
"""Wine Quality Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hv11v6hZyKQtDMeR6M7kK8VtO4hZ97Jw

Import dependecies
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

"""Data collection"""

# Loading the data set to pandas dataframe

wine_dataset=pd.read_csv('/content/winequality-red.csv')

wine_dataset.head()

wine_dataset.shape

wine_dataset.describe()

# Checking for missing values
np.sum(wine_dataset.isnull())

"""Data Analysis and visualization"""

# Number of values for each quality
sns.catplot(x='quality',data=wine_dataset,kind='count')

# Volatile acidity vs quality
plot =plt.figure(figsize=(5,5))
sns.barplot(x='quality',y='volatile acidity',data=wine_dataset)

# Compare citric acid	 vs quality
plot =plt.figure(figsize=(5,5))
sns.barplot(x='quality',y='citric acid',data=wine_dataset)

"""Correlation"""

correlation=wine_dataset.corr()

# Correlation between
plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues')

"""Data prepreprocissing

Split data and label
"""

X = wine_dataset.drop(columns ='quality')
Y = wine_dataset['quality']
print(X)
print(Y)

"""Label Binarization"""

Y =Y.apply(lambda y_value: 1 if y_value>=7 else 0)
print(Y)

"""Split in train and test"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2,random_state=2)

"""Train the model"""

classifier = RandomForestClassifier()

classifier.fit(X_train, Y_train)

"""Evaluate the model"""

# Accurancy for test data
X_test_prediction= classifier.predict(X_test)
X_test_accurancy = accuracy_score(X_test_prediction,Y_test)
print(X_test_accurancy)

# Accurancy for training data
X_train_prediction = classifier.predict(X_train)
X_train_accurancy = accuracy_score(X_train_prediction,Y_train)
print(X_train_accurancy)

"""Build a prediction System"""

input_data = ( 7.8,	0.76,	0.04,	2.3,	0.092,	15.0,	54.0,	0.9970,	3.26,	0.65,	9.8	)
# Change the input data to a numpy array
input_data_as_np_array =np.asarray(input_data)

# Reshape the data as we are predicting the label for only one instance
input_data_reshaped = input_data_as_np_array.reshape(1,-1)

prediction = classifier.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==1):
  print('Good Quality Wine')
else:
  print('Bad Quality Wine')